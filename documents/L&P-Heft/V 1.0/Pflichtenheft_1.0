\documentclass[a4paper,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[ngerman]{babel}
\usepackage{geometry}
\geometry{a4paper, left=30mm, right=25mm, top=25mm, bottom=25mm}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{tcolorbox}

\title{\textbf{HuggingEarth: }

Web Catalogue for User-Friendly Search and Retrieval of Machine Learning Models for EO Datacubes}
\author{TerraLink}

\date{\today}

\begin{document}

\maketitle

% Tabelle für Projektdaten
\begin{table}[h]
    \centering
    \begin{tabular}{|l|l|}
        \hline
        \textbf{Projektbezeichnung} & Web Catalogue for Machine Learning Models for EO Datacubes \\ \hline
        \textbf{Projektleitung} & TerraLink \\ \hline
        \textbf{Erstellt am} & 18. Oktober 2024 \\ \hline
        \textbf{Letzte Änderung am} & \today \\ \hline
        \textbf{Status} & In Bearbeitung \\ \hline
        \textbf{Aktuelle Version} & 2.0 (Projekmanagement-Tool aktualisiert) \\ \hline
    \end{tabular}
\end{table}

Änderungen:
\begin{itemize}
    \item 31.10.2024: Projektmanagement-Tool aktualisiert
\end{itemize}

\newpage
\tableofcontents
\newpage

\section{Einleitung}
\subsection{Projektübersicht}
Das Ziel dieses Projekts ist die Entwicklung von \textbf{HuggingEarth}, einem benutzerfreundlichen Web-Katalog, der die Suche und den Abruf von maschinellen Lernmodellen für Earth Observation (EO) ermöglicht. Der Katalog basiert auf der SpatioTemporal Asset Catalog (STAC)-Spezifikation und der STAC Machine Learning Model (MLM)-Erweiterung, um die Integration von ML-Modellen in Workflows der Nutzer zu unterstützen.
\subsection{Über TerraLink}
TerraLink ist ein führendes Unternehmen im Bereich der Entwicklung und Bereitstellung von Plattformen für maschinelles Lernen, spezialisiert auf Anwendungen für Erdbeobachtungsdaten. Unsere Mission ist es, fortschrittliche Technologien und benutzerfreundliche Lösungen für die Verwaltung und Verarbeitung von spatio-temporalen Daten zu liefern.

\subsection{Zweck des Dokuments}
Dieses Pflichtenheft definiert die Anforderungen und Rahmenbedingungen für das zu entwickelnde System. Hiermit stellen wir eine verbindliche Vereinbarung zwischen Ihnen und unserem Team TerraLink bereit und beschreiben unsere geplante Realisierung der von Ihnen genannten Anforderungen.

\section{Anforderungen aus dem Lastenheft}
Folgende Anforderungen aus dem Lastenheft werden im Detail umgesetzt:
\begin{itemize}
    \item \textbf{Katalogisierung von ML-Modellen:}
    Bereitstellung eines durchsuchbaren, filterbaren Katalogs von ML-Modellen für die Erdbeobachtung, mit Metadaten gemäß der STAC MLM-Erweiterung.
    \item \textbf{Modell Integration:}
    Ermöglicht es den Nutzern, diese Modelle über PyStac in ihre Workflows zu integrieren.
    \item \textbf{Upload und Download von STAC-konformen Metadaten:}
    Unterstützung des Hoch- und Herunterladens von raum-zeitlichen Metadaten, so dass die Nutzer Modelle in Standardformaten abrufen können, die sich leicht in ihre Python- oder R-Workflows integrieren lassen.
    \item \textbf{Community Contribution:}
    Benutzer können ihre eigenen Modelle hochladen und somit einen Beitrag zum Repository der Plattform leisten, das der STAC MLM-Erweiterung folgt.
\end{itemize}
\newpage

\section{Lieferumfang}
Wir liefern eine komplette Softwarelösung, die den Anforderungen aus dem Lastenheft entspricht und wie folgt aufgebaut ist:

\begin{itemize}
    \item Eine \textbf{Homepage}, die die Benutzer über die Plattform informiert und den Zugang zu allen Funktionen bietet.
    \item Eine \textbf{Unterseite zur Suche, Filterung, Anzeige und Download von Modellen.} Über ein Suchfeld kann man nach Stichworten suchen. Anschließend kann man die zur Suche passenden Modelle filtern. 
    Wenn man ein Modell ausgewählt hat
    werden  detaillierte Informationen zu den Modellen angezeigt.
    Außerdem werden visuelle Vorschauen bereitgestellt, um den Benutzern zu helfen, die Eignung eines Modells zu bewerten.
    Anschließend können die STAC-konformen Metadaten und die Modelldateien über einen Button heruntergeladen werden.
    \item Eine \textbf{Unterseite für den Upload von Modellen}, die sicherstellt, dass Benutzer eigene Modelle und Metadaten gemäß der STAC-MLM-Spezifikation hochladen können. Falls diese nicht eingehalten werden, erscheint eine Fehlermeldung auf der Website, die genauere Informationen enthält.
    \item Eine \textbf{Unterseite mit Tutorials} zur Nutzung der Plattform, einschließlich häufig gestellter Fragen (FAQs).
    \item Eine \textbf{Unterseite mit Tutorials zu RSTAC und PySTAC}, die detailliert erklärt, wie man die Modelle abfragt, anwendet und direkt in Python- oder R-Workflows integriert. Hierzu werden Code-Snippets bereitgestellt und eine Schritt-für-Schritt-Anleitung geliefert. 
    \item Ein \textbf{Impressum} gemäß den rechtlichen Anforderungen.
    \item (Bonus: Eine \textbf{Unterseite zur Verwaltung des Nutzerkontos}, um die Anmeldung, das Profilmanagement und die Verwaltung der hochgeladenen Modelle zu ermöglichen.)
\end{itemize}
\newpage

\section{Produktfunktionen und Ziele}

\subsection{/F10/ (/LF10/): Modellkatalog und Suche}
\textbf{Produktfunktion:} Bereitstellung eines durchsuchbaren, filterbaren Katalogs für ML-Modelle, der auf der STAC-MLM-Erweiterung basiert und eine intuitive Benutzeroberfläche bietet.

\textbf{Kernfunktionalitäten:}
\begin{itemize}
    \item \textbf{STAC-konforme Modell-Metadaten}:
    \begin{itemize}
    \item \textbf{Datenmodell}: Ein Datenmodell wird entwickelt, das alle Metadatenfelder der STAC-MLM-Erweiterung abdeckt, einschließlich:
    \begin{itemize}
        \item \textbf{Model task}: Attribut mit vordefinierten Werten wie "classification", "regression", \textquotedblright anomaly detection".
        \item \textbf{Temporal and spatial applicability}: Felder für Start- und Enddatum (temporal), Geometrien für räumliche Daten (z.B. Region of Interest als GeoJSON).
        \item \textbf{Data type}: Attribut, das auf verfügbare Datentypen verweist.
        \item \textbf{Input/output requirements}: Attribut für Anforderungen an Eingabe- und Ausgabedaten (z.B. Auflösung, Bänderanzahl, Dateiformat).
        \item \textbf{Validierung}: Implementierung einer Validierungslogik, die sicherstellt, dass alle Metadaten den STAC-MLM-Richtlinien entsprechen, bevor sie gespeichert werden können.
    \end{itemize}
\end{itemize}

\textbf{2. Such- und Filtermöglichkeiten:}
\begin{itemize}
    \item \textbf{Suchfunktion}: Implementierung einer Such-API, die Anfragen basierend auf den folgenden Parametern zulässt:
    \begin{itemize}
        \item \textbf{Model task}: Suchfilter basierend auf vordefinierten Aufgaben (z.B. "classification").
        \item \textbf{Geografische Region}: Verwendung von Geodaten (GeoJSON) zur Filterung nach räumlicher Relevanz.
        \item \textbf{Data type}: Filterung basierend auf unterstützten Datentypen.
        \item \textbf{Zeitlicher Bereich}: Filterung nach Start- und Enddatum.
        \item \textbf{Cloud Coverage}: Filterung nach der prozentualen Wolkenabdeckung.
    \end{itemize}
\end{itemize}

\textbf{3. Modell-Exploration:}
\begin{itemize}
    \item \textbf{Metadatenseite pro Modell}: Entwicklung einer Ansicht, die für jedes Modell detaillierte Informationen anzeigt. Diese Seite enthält:
    \begin{itemize}
        \item \textbf{Modellbeschreibung}: Ein Textfeld, das den Zweck des Modells und die zugrunde liegende Architektur erklärt.
        \item \textbf{Anwendungsfälle}: Angabe der empfohlenen Anwendungsfälle und potenziellen Einschränkungen.
        \item \textbf{Hyperparameter}: Darstellung der für das Modell verwendeten Hyperparameter.
        \item \textbf{Input/Output-Formate}: Auflistung der Eingabe- und Ausgabeformate des Modells.
        \item \textbf{Zusätzliche Anmerkungen}: Weiterführende Hinweise zur Modellnutzung.
    \end{itemize}
\end{itemize}

\textbf{Implementierungsstrategie:} 
Die Such- und Filterlogik wird über eine API-Endpunktstruktur im Back-End abgebildet, die Suchanfragen über MongoDB abwickelt. Indizierung der wichtigsten Filterfelder stellt eine performante Verarbeitung sicher. Eine kombinierte Abfrage ermöglicht es Nutzern, mehrere Filterparameter zu kombinieren, um präzise und relevante Suchergebnisse zu erzielen. Ergebnisse werden dem Nutzer in einer Ergebnisliste mit Seitennummerierung zurückgegeben, die die wesentlichen Metadaten des Modells enthält und nach Relevanz sortiert ist.

\subsubsection{Anwendungsfall}\textbf{Suche nach Modellen für die Waldüberwachung}

\textbf{Beschreibung:} Ein Umweltforscher möchte mithilfe von Erdbeobachtungsdaten die Veränderung und den Zustand von Wäldern überwachen. Ziel ist es, ein Machine-Learning-Modell zu finden, das sich für die Klassifikation und Detektion von Waldgebieten eignet und Veränderungen wie Abholzung oder Waldbrände identifizieren kann.

\textbf{Schritte im System:}
\begin{enumerate}
    \item Der Benutzer öffnet die Suchseite und gibt im Suchfeld „Waldüberwachung“ ein.
    \item Im Filterbereich wählt der Benutzer:
    \begin{itemize}
        \item \textbf{Modellaufgabe}: Klassifikation oder Anomaliedetektion (um Modelle zu finden, die auf die Erkennung von Veränderungen spezialisiert sind).
        \item \textbf{Datentyp}: Sentinel-2 (geeignet für Vegetationsanalyse) oder Landsat (ermöglicht zeitliche Vergleichbarkeit über lange Zeiträume).
        \item \textbf{Geografische Region}: Der Benutzer gibt die gewünschte Region ein, z. B. ein Land oder eine spezifische Region wie den Amazonas.
        \item \textbf{Zeitspanne}: Der Benutzer definiert eine Zeitspanne, um nur Modelle anzuzeigen, die Daten in dieser Periode verarbeiten können.
        \item \textbf{Cloud Coverage}: Der Benutzer setzt eine maximale Wolkenabdeckung von 10 \%, um Modelle auszuwählen, die klare Bilder voraussetzen.
    \end{itemize}
    \item Das System führt eine Abfrage in der MongoDB-Datenbank durch und zeigt eine Liste der Modelle an, die den festgelegten Kriterien entsprechen.
    \item Der Benutzer wählt ein Modell aus der Liste aus und öffnet die Detailansicht. Diese Ansicht enthält:
    \begin{itemize}
        \item Eine Modellbeschreibung, die den Anwendungsfall „Waldüberwachung“ bestätigt.
        \item Informationen zur Architektur und spezifischen Anwendungsfällen.
        \item Vorschauen der Eingabedaten, die die Modellabdeckung und typische Ergebnisse für Waldgebiete visualisieren.
    \end{itemize}
    \item Der Benutzer kann das Modell über einen Button herunterladen oder die STAC-konformen Metadaten einsehen und direkt in seinen Workflow einbinden.
\end{enumerate}

\textbf{Erwartetes Ergebnis:} Der Forscher findet ein Modell, das speziell auf die Waldüberwachung ausgerichtet ist, und erhält alle notwendigen Informationen, um das Modell für die Analyse und kontinuierliche Überwachung von Waldgebieten einzusetzen.


\subsection{/F20/ (/LF20/): Modell-Upload und Metadatenverwaltung}
\textbf{Produktfunktion:} Die Upload- und Verwaltungsfunktionalität ermöglicht Benutzern, neue Modelle mit STAC-konformen Metadaten in den Katalog hochzuladen. Der Prozess stellt sicher, dass die Modelle den Anforderungen der STAC-MLM-Spezifikationen entsprechen und für die Abfrage und Integration durch STAC-kompatible Clients bereitstehen.

Der Upload-Prozess erfolgt in mehreren Schritten, die jeweils eine Validierung und Benutzerunterstützung bieten:

\begin{itemize}
    \item \textbf{Schritt 1: Metadatenerfassung} \\
    Der Benutzer gibt grundlegende Modellinformationen an, darunter:
    \begin{itemize}
        \item \textbf{Modellname und -beschreibung}: Klarer Name und Zweck des Modells.
        \item \textbf{Modellaufgabe}: Auswahl der Aufgabenart (z.B. Klassifikation, Regression, Anomaliedetektion) aus vordefinierten Optionen.
        \item \textbf{Ein- und Ausgabeanforderungen}: Angaben zu Datentyp, Auflösung, Anzahl der Bänder und Dateiformat.
    \end{itemize}
    
    \item \textbf{Schritt 2: Angaben zur Datenquelle und Trainingsdetails} \\
    Die Benutzer geben die verwendeten Erdbeobachtungsdaten an und spezifizieren die räumlichen und zeitlichen Parameter des Trainingsdatensatzes. Wichtige Angaben sind:
    \begin{itemize}
        \item \textbf{Datenquelle}: Typ des Datensatzes (z.B. Sentinel-2).
        \item \textbf{Räumliche und zeitliche Abdeckung}: Angabe der geografischen Abdeckung im GeoJSON-Format und des Zeitbereichs im ISO 8601-Format (YYYY-MM-DD).
    \end{itemize}

    \item \textbf{Schritt 3: Modell-Upload} \\
    Benutzer laden die Modelldateien hoch, wobei folgende Formate unterstützt werden:
    \begin{itemize}
        \item Unterstützte Dateiformate: ONNX (.onnx), PyTorch (.pt), TensorFlow (.h5).
    \end{itemize}

    \item \textbf{Schritt 4: Metadatenvalidierung und Fehlerbehebung} \\
    Während des Uploads werden die Metadaten auf Vollständigkeit und Konformität mit den STAC-MLM-Spezifikationen geprüft:
    \begin{itemize}
        \item \textbf{STAC-Konformität}: Überprüfung, ob alle erforderlichen Felder vorhanden und korrekt formatiert sind. Die räumliche Abdeckung wird im GeoJSON-Format und die zeitlichen Daten im ISO 8601-Format erwartet.
        \item \textbf{Datenintegrität}: Sicherstellung, dass die geografische und zeitliche Abdeckung den Angaben in den Trainingsdetails entspricht.
        \item \textbf{Fehlermeldungen}: Bei Problemen werden präzise Fehlermeldungen angezeigt, z. B. „Das Feld ‚Model Task‘ ist erforderlich und muss einen vordefinierten Wert enthalten“ oder „Die geografische Abdeckung muss im gültigen GeoJSON-Format vorliegen“.
    \end{itemize}

    \item \textbf{Schritt 5: STAC-Metadatengenerierung} \\
    Das System generiert automatisch ein STAC-kompatibles Metadatendokument, das für STAC-Clients abrufbar ist. Die Validierung stellt sicher, dass:
    \begin{itemize}
        \item Alle wesentlichen Felder ausgefüllt sind und die STAC-MLM-Spezifikationen erfüllen.
        \item Die Struktur der Metadaten für die Abfrage und Integration mit PySTAC und RSTAC optimiert ist.
    \end{itemize}

    \item \textbf{Schritt 6: Bestätigung und Benachrichtigung} \\
    Nach erfolgreichem Upload erhält der Benutzer eine Erfolgsmeldung. Das Modell kann im Benutzerprofil unter "Meine Modelle" angesehen und verwaltet werden und ist im Suchkatalog auffindbar.\end{itemize}

\textbf{Benutzerunterstützung und Anleitung:} \\
Die Plattform bietet eine interaktive Schritt-für-Schritt-Anleitung. Hilfetexte und Tooltipps unterstützen den Benutzer bei der korrekten Eingabe der Daten und liefern Beispiele für Metadaten im STAC-MLM-Format.

\textbf{Modellstruktur für MongoDB} \\
Die hochgeladenen Modelle und Metadaten werden in MongoDB gespeichert, wobei Mongoose für Schema-Validierungen und Fehlerbehebung integriert ist. Die folgenden Schema-Definitionen sind enthalten:

\begin{itemize}
    \item \textbf{Modell-Schema (ModelSchema)}: Speichert zentrale Modellmetadaten wie:
    \begin{itemize}
        \item \textbf{name} (Modellname), \textbf{description} (Beschreibung), \textbf{modelTask} (z.B. Klassifikation).
        \item \textbf{temporalCoverage} und \textbf{spatialCoverage} (zeitliche und räumliche Abdeckung).
        \item \textbf{dataType} (z.B. Sentinel-2), \textbf{inputRequirements} und \textbf{outputRequirements} (Ein- und Ausgabeanforderungen).
        \item \textbf{filePath} (Pfad zur Modell-Datei), \textbf{uploadedBy} (Benutzer-ID des Uploaders).
    \end{itemize}
    
    \item \textbf{Benutzer-Schema (UserSchema)}: Speichert Benutzerdetails, z. B.:
    \begin{itemize}
        \item \textbf{username} (Benutzername), \textbf{email} (E-Mail-Adresse), \textbf{role} (Benutzerrolle, z.B. „admin“, „user“).
    \end{itemize}
    
    \item \textbf{Upload-Log-Schema (UploadLogSchema)}: Verfolgt den Status jedes Uploads (z.B. „pending“, „approved“ oder „rejected“) und listet Validierungsfehler auf.
\end{itemize}

Diese Struktur gewährleistet, dass alle wesentlichen Metadatenfelder der STAC-MLM-Spezifikationen entsprechen und effizient in der MongoDB-Datenbank gespeichert werden. Das Back-End verwaltet die Dateneingabe und Validierung dieser Informationen mithilfe von Mongoose.


\subsection{/F30/ (/LF30/): Integration mit STAC-Clients}
\textbf{Produktfunktion:} Unterstützung von STAC-Clients wie PySTAC und Bereitstellung von Modellen und Metadaten für direkte Integration.

\textbf{Kernfunktionalitäten:}
\begin{itemize}
    \item \textbf{STAC-Client Support:} Die Anwendung unterstützt den Abruf von Modellen und Metadaten via PySTAC-Client. Zudem werden Anleitungen und Code-Snippets bereitgestellt, um Modelle und Metadaten in Python-Workflows zu integrieren.

    \item \textbf{Model Fetching:} Die Anwendung stellt die STAC-Metadaten für jedes maschinelle Lernmodell zum Download bereit. Die Metadaten enthalten Links zu den Modell-Dateien, die User über STAC-kompatible Clients herunterladen oder abrufen können.

    \item \textbf{Demonstration der Client-Integration:} Die Integration in PySTAC wird so erweitert, dass User Modelle über das Catalog-Frontend suchen und abrufen können.
\end{itemize}

\subsection{/F40/ (/LF40/): Performance}

\textbf{Reaktionszeit von 1 Sekunde für Benutzerinteraktionen}
\begin{itemize}
    \item \textbf{Strategie}: Verwendung von Asynchronität und Lazy Loading, um die Ladezeiten für kritische Elemente zu minimieren. Daten werden über AJAX geladen, sodass die Seite ohne vollständiges Neuladen aktualisiert werden kann.
    \item \textbf{Frontend-Optimierung}: Einsatz von Code-Splitting und Caching, um die Ladezeiten zu minimieren und die Benutzeroberfläche reaktiv zu halten. 
\end{itemize}
\textbf{Reaktion innerhalb von 0,1 Sekunden für interaktive Visualisierungen}
\begin{itemize}
    \item \textbf{Strategie}: Nutzung von WebGL und D3.js für hochperformante interaktive Grafiken. WebGL bietet Hardware-Beschleunigung und ermöglicht schnelle Rendering-Zeiten, ideal für Karten und Modelle.
    \item \textbf{Serverseitiges Caching}: Häufig abgerufene Metadaten und Modelle werden im Cache gespeichert, um die Antwortzeiten zu verkürzen.
\end{itemize}

\subsection{/F50/ (/LF50/): Sicherheit}
Zur Sicherstellung der Datensicherheit und Integrität werden folgende Sicherheitsanforderungen implementiert:
\begin{itemize}
    \item \textbf{Datenverschlüsselung}: Alle Datenübertragungen müssen SSL-verschlüsselt sein.
    \item \textbf{Zugriffskontrolle}: Nur autorisierte Nutzer dürfen auf bestimmte Funktionen (z.B. Modell-Upload) zugreifen. Ein Rollen- und Rechteverwaltungssystem regelt den Zugriff.
    \item \textbf{Datenintegrität}: Nutzerdaten und Modellmetadaten dürfen nur von authentifizierten und autorisierten Nutzern geändert werden.
    \item \textbf{Audit Logging}: Alle sicherheitsrelevanten Aktivitäten sollen geloggt und regelmäßig auf Anomalien überprüft werden.
\end{itemize}



\subsection{/F60/ (/LF60/): Wartbarkeit}

\textbf{Open Source und Lizenzkompatibilität}
\begin{itemize}
    \item \textbf{Strategie}: Das Projekt wird unter einer \href{https://opensource.org/licenses}{OSI-konformen Open-Source-Lizenz} veröffentlicht. Alle externen Bibliotheken und Tools werden überprüft, um sicherzustellen, dass deren Lizenzen mit der gewählten Lizenz kompatibel sind.
\end{itemize}
\textbf{Dokumentation}
\begin{itemize}
    \item \textbf{Strategie}: Alle Schritte zur Entwicklung, Installation, Konfiguration und Testung der Plattform werden in einer strukturierten Dokumentation festgehalten. Markdown-Dokumente und ein \href{https://github.com/ReinerMx/GS2-2024}{GitHub Repository} dienen als Plattform für die Online-Dokumentation.
\end{itemize}



\section{Produktleistungen}

\subsection{/L10/ (/LL10/): Daten- und Metadaten-Download}
\begin{itemize}
    \item \textbf{STAC-Metadaten-Download}: Nutzer können die STAC-Metadaten eines Modells durch Klick auf einen Button herunterladen und z.B. in PySTAC verwenden.
    \item \textbf{Modell-Datei-Download}: Bereitstellung von Download-Links für Modell-Dateien (z.B. ONNX, TensorFlow, PyTorch).
\end{itemize}

\subsection{/L20/ (/LL20/): Community-Contribution und Verwaltung}
\begin{itemize}
    \item Ein Benutzersystem mit Registrierung und Anmeldung sorgt dafür, dass nur verifizierte Benutzer Modelle hochladen können.
    \item Eine dedizierte Upload-Seite im Frontend erlaubt Benutzern das Hochladen von Modellen, einer JSON-Datei mit STAC-konformen Metadaten und einer Beschreibung.
    \item Eine automatische Validierung prüft die JSON-Metadaten auf Einhaltung der STAC-MLM-Spezifikationen.
\end{itemize}

\subsection{/L30/ (/LL30/): Bereitstellung}

\textbf{Bereitstellung über Docker}
\begin{itemize}
    \item \textbf{Strategie}: Bereitstellung aller Komponenten als Docker-Container, wodurch eine einfache Installation und Konfiguration auf beliebigen Servern oder Cloud-Umgebungen möglich wird.
    \item \textbf{Docker Compose}: Verwendung von Docker Compose für den Aufbau und das Management der Container (Frontend, Backend, Datenbank).
    \item \textbf{Cloud-Kompatibilität}: Bereitstellung auf Cloud-Plattformen wie AWS oder Google Cloud, um skalierbare Lösungen zu bieten.
\end{itemize}
\textbf{Docker Hub Integration}
\begin{itemize}
    \item \textbf{Strategie}: Alle Docker-Images werden auf Docker Hub bereitgestellt und sind dort leicht zugänglich. Die Images werden regelmäßig aktualisiert und versioniert, sodass ältere Versionen weiterhin verfügbar sind.
\end{itemize}

\subsection{/L40/ (/LL40/): Training und Demonstration}
\begin{itemize}
    \item \textbf{Dokumentation und Tutorials}: Bereitstellung von Dokumentation, die sowohl allgemeine Benutzer als auch Entwickler unterstützt. Die Dokumentation umfasst Einführung, Installation und Setup, Benutzerhandbuch und API-Dokumentation.
    \item \textbf{Schritt-für-Schritt-Tutorials}: Nutzeranleitungen für Modellnutzung, Metadatenabruf und Workflow-Integration, inklusive Integration von STAC-Clients. Über das Frontend zugänglich (unter ,,Hilfe“).
\end{itemize}

\subsection{/L50/ (/LL50/): Projektmanagement}

\textbf{Online-Projektmanagement-Tool}
\begin{itemize}
    \item \textbf{Strategie}: Zugang zum \href{https://github.com/ReinerMx/GS2-2024}{GitHub Repository}, um alle Aufgaben, Fortschritte und Meilensteine transparent zu verwalten.
\end{itemize}

\section{Benutzeroberfläche}

\subsection{/B10/ (/LB10/): Benutzerfreundlichkeit}

\textbf{Intuitive Benutzeroberfläche (UI)}
\begin{itemize}
    \item \textbf{Strategie}: Die Plattform bietet eine klare, minimalistische Oberfläche, angelehnt an Hugging Face. Die Hauptfunktionen (z.B. Modellsuche, Ansicht der Metadaten und Download) sind durch klare Schaltflächen und Menüs sofort erkennbar und zugänglich.
    \item \textbf{Technologie \& Frameworks}: Für das Frontend wird eine Kombination aus HTML, CSS und JavaScript verwendet, um eine intuitive und reaktionsschnelle Benutzeroberfläche zu entwickeln. Bootstrap wird zur Vereinfachung der Layouts und zur Sicherstellung einer konsistenten Gestaltung genutzt.
    
    \item \textbf{Browserkompatibilität}: Cross-Browser-Tests mit BrowserStack und die Einhaltung von HTML5-, CSS3- und ES6-Standards gewährleisten eine Funktionalität auf mindestens 80\% der gängigen Browser.
\end{itemize}

\textbf{Barrierefreiheit für Farbenblindheit}
\begin{itemize}
    \item \textbf{Strategie}: Farbkontraste werden sorgfältig gestaltet, um sicherzustellen, dass die Farben auch von Personen mit Farbsinnstörungen unterschieden werden können.
    \item \textbf{Farbschemata und UX-Design}: Die Einhaltung der WCAG (Web Content Accessibility Guidelines), insbesondere für Kontraste, wird gewährleistet und Bibliotheken wie Color Brewer verwendet, um geeignete Farbpaletten zu erstellen.
\end{itemize}
    \item \textbf{Such- und Filterfunktionen}:
        \begin{itemize}
            \item Einfach zu bedienende Suchfunktionen und Filteroptionen nach spezifischen Modellanforderungen.
            \item Filtermöglichkeiten für geographische Region, Datentyp, Zeitspanne und Wolkenabdeckung.
        \end{itemize}
\subsection{/B20/ (/LB20/): Visualisierung}
\textbf{Technische Umsetzung der Visualisierung:} Die Visualisierungsfunktionalität wird durch den Einsatz von WebGL und D3.js realisiert und bietet Nutzern eine intuitive, interaktive Darstellung der Modelldaten.

\begin{itemize}
    \item \textbf{Technologiewahl:} WebGL ermöglicht hardware-beschleunigtes Rendering für schnelle und interaktive Kartenansichten und ist ideal für die Darstellung großer Datenmengen. D3.js wird für die Manipulation und Darstellung der Modelldaten eingesetzt, um eine dynamische und anpassbare Nutzererfahrung zu gewährleisten.
    
    \item \textbf{Interaktive Kartenansicht:} Die räumliche Abdeckung der Modelle wird mithilfe einer interaktiven Karte dargestellt, wobei Marker und Polygone zur Visualisierung der Abdeckungsregionen verwendet werden. Dies erleichtert den Nutzern die geografische Einordnung der Modelle.
    Kartenrenderings werden in einer Auflösung von mindestens 1920x1080 Pixeln und mit einer Bildwiederholrate von mindestens 60 FPS dargestellt.
    
    \item \textbf{Datenvorschau:} Zusätzlich zur Kartenansicht werden Vorschauen der Eingabedaten des Modells angezeigt, die es Nutzern ermöglichen, die Abdeckung und Qualität der zugrunde liegenden Daten schnell zu bewerten. Modellvorschauen zeigen Rasterdaten in einer Auflösung von mindestens 512x512 Pixeln, wobei eine Standardfarbgebung zur Unterstützung farbblinder Nutzer verwendet wird.
    
    \item \textbf{Beispielkonfigurationen:} Die Visualisierung bietet verschiedene Beispielkonfigurationen, wie z.B. die Darstellung von Sentinel-2-Bildern zur Vegetationsanalyse. Dies unterstützt Nutzer bei der Interpretation der angezeigten Daten und hilft ihnen, die Eignung des Modells für spezifische Anwendungsfälle besser einzuschätzen.
\end{itemize}
 
\end{itemize}.
    
\section{Qualitätsanforderungen}

\begin{table}[h]
    \centering
    \begin{tabular}{|l|c|c|c|c|c|}
        \hline
        \textbf{Qualitätsanforderung} & \textbf{sehr gut} & \textbf{gut} & \textbf{normal} & \textbf{nicht relevant} \\ \hline
        \textbf{Funktionalität} & x &  &  &  \\ \hline
        Angemessenheit &  & x &  &  \\ \hline
        Richtigkeit & x &  &  &  \\ \hline
        Interoperabilität & x &  &  &  \\ \hline
        Ordnungsmäßigkeit & x &  &  &  \\ \hline
        Sicherheit &  & x &  &  \\ \hline
        \textbf{Zuverlässigkeit} & x &  &  &  \\ \hline
        Reife & x &  &  &  \\ \hline
        Fehlertoleranz &  & x &   &  \\ \hline
        Wiederherstellbarkeit &  & x &   &  \\ \hline
        \textbf{Benutzbarkeit} & x &   &  &  \\ \hline
        Verständlichkeit & x &  &   &  \\ \hline
        Erlernbarkeit &  & x &   &  \\ \hline
        Bedienbarkeit & x &  &  &  \\ \hline
        \textbf{Effizienz} &  & x &   &  \\ \hline
        Zeitverhalten &  & x &  &  \\ \hline
        Verbrauchsverhalten &  & x &  &  \\ \hline
        \textbf{Änderbarkeit} &  &  & x &  \\ \hline
        Analysierbarkeit &  &  & x &  \\ \hline
        Modifizierbarkeit &  &  & x &  \\ \hline
        Stabilität &  &  & x &  \\ \hline
        Prüfbarkeit &  &  & x &  \\ \hline
       \textbf{ Übertragbarkeit} &  &  & x &  \\ \hline
        Anpassbarkeit &  &  & x &  \\ \hline
        Installierbarkeit &  &  & x &  \\ \hline
        Konformität &  &  & x &  \\ \hline
        Austauschbarkeit &  &  & x &  \\ \hline
    \end{tabular}
    \caption{Qualitätsanforderungen}
\end{table}


\section{User Stories für Zielgruppen}
\subsection{Machine Learning Engineers / Data Scientists}
\begin{tcolorbox}[colback=blue!5!white,colframe=blue!75!black,title=User Story]
Als Machine Learning Engineer möchte ich mit HuggingEarth vortrainierte Erdbeobachtungs-Modelle (EO-Modelle) einfach in meine Python- oder R-Workflows integrieren können, um wiederkehrende Aufgaben in meinen Projekten effizient zu automatisieren, ohne jedes Mal neue Modelle entwickeln zu müssen.
\end{tcolorbox}

\textbf{Akzeptanzkriterien:}
\begin{itemize}
    \item Ich kann nach EO-Modellen suchen, die bereits auf ähnlichen Daten (z.B. Sentinel-2) trainiert wurden.
    \item Die Plattform bietet mir die Möglichkeit, die Metadaten der Modelle in einem STAC-konformen Format herunterzuladen.
    \item Ich kann mit PySTAC die Modelle und zugehörige Metadaten einfach in mein Python-Programm integrieren und in meiner Pipeline verwenden.
    \item Es gibt eine Dokumentation und Beispielcode, die mir helfen, den STAC-Client zu nutzen.
\end{itemize}

% User Story für Environmental Researchers
\subsection{Environmental Researchers}
\begin{tcolorbox}[colback=green!5!white,colframe=green!75!black,title=User Story]
Als Umweltforscher möchte ich auf maschinelle Lernmodelle für die Fernerkundung zugreifen können, die mir bei der Klassifikation von Landnutzungsflächen und der Analyse von Zeitreihen (z.B. Veränderungen in Vegetationsflächen) helfen, um fundierte Entscheidungen für ökologische Studien und den Umweltschutz zu treffen.
\end{tcolorbox}

\textbf{Akzeptanzkriterien:}
\begin{itemize}
    \item Ich kann Modelle nach spezifischen Fernerkundungsaufgaben wie Landnutzungsklassifikation und Zeitreihenanalyse durchsuchen.
    \item Ich kann Modelle basierend auf ihren geographischen Einsatzbereichen und Datentypen (z.B. Sentinel-2 oder Landsat) filtern.
    \item Die Metadaten der Modelle enthalten detaillierte Informationen zu Anwendungsfällen, Trainingsdaten und Modellarchitektur.
    \item Es gibt visuelle Vorschauen, die zeigen, welche Gebiete und Daten das Modell abdeckt, um die Eignung für meine Studie besser zu beurteilen.
\end{itemize}

% User Story für Geospatial Professionals
\subsection{Geospatial Professionals}
\begin{tcolorbox}[colback=yellow!5!white,colframe=yellow!75!black,title=User Story]
Als Geoprofessional benötige ich einsatzbereite maschinelle Lernmodelle, um georäumliche Datenverarbeitung effizient zu automatisieren, sodass ich wiederholbare Workflows schnell umsetzen und die Verarbeitung großer Datenmengen für Aufgaben wie die Klassifikation und Detektion von Mustern beschleunigen kann.
\end{tcolorbox}

\textbf{Akzeptanzkriterien:}
\begin{itemize}
    \item Ich kann aus einer Liste vortrainierter Modelle auswählen, die speziell für georäumliche Datenverarbeitungsaufgaben (z.B. Klassifikation, Anomaliedetektion) optimiert sind.
    \item Die Plattform bietet fertige, vortrainierte Modelle mit klaren Anweisungen zur Verwendung in der Modell-Pipeline, ohne dass zusätzliche Anpassungen erforderlich sind.
    \item Ich kann die Modelle und ihre Metadaten in einem standardisierten Format herunterladen und in meine bestehenden GIS-Workflows integrieren.
    \item Die Integration mit Python-basierten STAC-Clients ermöglicht mir die Automatisierung der Datenverarbeitung in großen Projekten, ohne die Notwendigkeit, jedes Modell manuell zu prüfen.
\end{itemize}

\section{Projektzeitplan}

\subsection*{Phase 1: Design und Architekturplanung}
\begin{itemize}
    \item \textbf{Dauer}: 2 Wochen (30. Oktober 2024 – 13. November 2024)
    \item \textbf{Aufgaben}:
    \begin{itemize}
        \item Entwicklung des technischen Designs für die Plattform.
        \item Festlegung der Systemarchitektur (Front-End, Back-End, Datenbankstruktur).
        \item Planung der API-Struktur und STAC-Client-Integration.
        \item Definition der Benutzeroberfläche und User Experience Design.
    \end{itemize}
    \item \textbf{Meilenstein}: Abschluss der Systemarchitektur und des Designs bis \textbf{13. November 2024}.
\end{itemize}

\subsection*{Phase 2: Implementierung der Front-End-Komponenten}
\begin{itemize}
    \item \textbf{Dauer}: 7 Wochen (01. November 2024 – 17. Dezember 2024)
    \item \textbf{Aufgaben}:
    \begin{itemize}
        \item Implementierung des Front-Ends.
        \item Entwicklung der Benutzeroberfläche mit Such- und Filterfunktionen.
        \item Integration von Upload- und Download-Mechanismen für Metadaten und Modelle.
        \item Optimierung der Benutzerfreundlichkeit und Zugänglichkeit (Barrierefreiheit).
    \end{itemize}
    \item \textbf{Meilenstein}: Fertigstellung des Front-Ends bis \textbf{17. Dezember 2024}.
\end{itemize}

\subsection*{Phase 3: Implementierung der Kernfunktionen (Back-End)}
\begin{itemize}
    \item \textbf{Dauer}: 6 Wochen (27. November 2024 – 08. Januar 2025)
    \item \textbf{Aufgaben}:
    \begin{itemize}
        \item Implementierung des Back-Ends (Node.js) und der Datenbank (MongoDB).
        \item Erstellung und Implementierung der RESTful API.
        \item Integration der STAC-MLM-Spezifikationen in das Datenmanagement.
        \item Testen der API-Schnittstellen.
    \end{itemize}
    \item \textbf{Meilenstein}: Fertigstellung des Back-End-Systems mit funktionierenden Schnittstellen bis \textbf{08. Januar 2025}.
\end{itemize}

\subsection*{Phase 4: Testphase (Funktionale und nicht-funktionale Tests)}
\begin{itemize}
    \item \textbf{Dauer}: 2 Wochen (08. Januar 2025 – 22. Januar 2025)
    \item \textbf{Aufgaben}:
    \begin{itemize}
        \item Durchführung von Funktionstests zur Überprüfung der Kernfunktionalitäten.
        \item Durchführung von Leistungstests (Reaktionszeit, Parallelität, Datenabfragen).
        \item Durchführung von Usability-Tests.
        \item Behebung von Fehlern und Optimierung der Leistung.
    \end{itemize}
    \item \textbf{Meilenstein}: Abschluss der Testphase und Behebung aller kritischen Fehler bis \textbf{22. Januar 2025}.
\end{itemize}

\subsection*{Phase 5: Deployment und Dokumentation}
\begin{itemize}
    \item \textbf{Dauer}: 2 Woche (15. Januar 2025 – 28. Januar 2025)
    \item \textbf{Aufgaben}:
    \begin{itemize}
        \item Erstellung von Docker-Containern für Front-End und Back-End.
        \item Test des Deployments auf Cloud-Plattformen (z.B. AWS, Google Cloud).
        \item Erstellung der Projektdokumentation (Installationsanleitung, Benutzerhandbuch, Wartungsdokumentation).
    \end{itemize}
    \item \textbf{Meilenstein}: Bereitstellung der Docker-Images und finale Abgabe des Projekts bis \textbf{29. Januar 2025}.
\end{itemize}

\begin{figure}[h]
    \centering
    \includegraphics[width=\textwidth]{gantt.png}
    \caption{Gantt-Chart}
    \label{fig:gantt}
\end{figure}

\section{Technische Abhängigkeiten}

\subsection{Bibliotheken und Frameworks}
Für die Entwicklung des Systems werden spezifische Bibliotheken und Frameworks verwendet, die eine reibungslose und effiziente Funktionalität gewährleisten:
\begin{itemize}
    \item \textbf{PySTAC und RSTAC}: Diese Bibliotheken werden für die Integration der STAC-Modelle und die Abfrage von Metadaten eingesetzt.
    \item \textbf{D3.js und WebGL}: Diese Frameworks sind für die Implementierung von Visualisierungen verantwortlich und ermöglichen hardware-beschleunigte Darstellungen.
    \item \textbf{Bootstrap}: Zur Gewährleistung einer responsiven Benutzeroberfläche wird das Bootstrap-Framework verwendet.
\end{itemize}

\subsection{Externe APIs und Dienste}
Bestimmte externe Dienste und APIs sind für die Funktion des Systems erforderlich:
\begin{itemize}
    \item \textbf{STAC-API}: Zur Bereitstellung und Verwaltung der STAC-konformen Daten und Metadaten.
    \item \textbf{Mapbox oder Google Maps API}: Für die Kartendarstellung und die Visualisierung geografischer Informationen.
    \item \textbf{Sentinel-Daten}: Diese Daten werden als Datengrundlage für die Modellentwicklung und -validierung genutzt.
\end{itemize}

\subsection{Infrastrukturanforderungen}
Für die effiziente Bereitstellung und Wartung des Systems werden die folgenden Infrastrukturkomponenten benötigt:
\begin{itemize}
    \item \textbf{Datenbank}: Eine MongoDB-Instanz zur Speicherung und Verwaltung der Metadaten und Benutzerdaten.
    \item \textbf{Server-Hosting}: Für den Produktiveinsatz wird ein Hosting-Dienst mit ausreichender Rechenkapazität und Skalierbarkeit empfohlen (z.B. AWS oder Google Cloud).
\end{itemize}
\end{document}